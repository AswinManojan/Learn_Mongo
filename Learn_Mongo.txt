Learn Mongo

Creating a collection named movies and inserting documents

db.movies.insert({title:"Fight Club", writer: "Chuck Palahniuk", year: "1999", actors:["Brad Pitt", "Edward Norton"]})
db.movies.insert({title:"Pulp Fiction", writer:"Quentin Tarantino", year:"2009", actors:["John Travolta", "Uma Thurman"]})
db.movies.insert({title:"Inglorious Basterds", writer:"Quentin Tarantino", year:"2009", actors:["Brad Pitt", "Diane Kruger", "Eli Roth"]})
db.movies.insert({title:"The Hobbit: An unexpected Journey", writer:"J.R.R. Tolkein", year:"2012",franchise:"The Hobbit"})
db.movies.insert({title:"The Hobbit: The Desolation of Smaug", writer:"J.R.R Tolkien", year:"2013", franchise:"The Hobbit"})
db.movies.insert({title:"The Hobbit: The Battle of the Five Armies", writer:"J.R.R Tolkien", year:"2002", franchise:"The Hobbit", synopsis:"Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness."})
db.movies.insert({title:"Pee Wee Herman's Big Adventures"})
db.movies.insert({title:"Avatar"})

query the movies collection to

1. get all documents
	db.movies.find()
	
2. get all documents with writer set to "Quentin Tarantino"
	db.movies.find({writer:"Quentin Tarantino"})
	
3. get all documents where actors include "Brad Pitt"
	db.movies.find({actors:"Brad Pitt"})
	
4. get all documents with franchise set to "The Hobbit"
	db.movies.find({franchise:"The Hobbit"})
	
5. get all movies released in the 90s
	db.movies.find({year:{$gt:"1990", $lt:"2000"}})
	
6. get all movies released before the year 2000 or after 2010
	db.movies.find({$or:[{year:{$gt:"2010"}},{year: {$lt:"2000"}}]})
	
	
Update Documents
	
1. add a synopsis to "The Hobbit: An Unexpected Journey" : "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."
	db.movies.update({_id:ObjectId("5c9f98e5e5c2dfe9b3729bfe")}, {$set:{synopsis:"A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."}})
	
2. add a synopsis to "The Hobbit: The Desolation of Smaug" : "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."
	db.movies.update({_id:ObjectId("5c9fa42ae5c2dfe9b3729c03")}, {$set:{synopsis:"The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."}})
	
3. add an actor named "Samuel L. Jackson" to the movie "Pulp Fiction"
	db.movies.update({_id:ObjectId("5c9f983ce5c2dfe9b3729bfc")}, {$push:{actors:"Samuel L. Jackson"}})
	

Text Search	

1. find all movies that have a synopsis that contains the word "Bilbo"
	db.movies.find({synopsis:{$regex:"Bilbo"}})
	
2. find all movies that have a synopsis that contains the word "Gandalf"
	db.movies.find({synopsis:{$regex:"Gandalf"}})
	
3. find all movies that have a synopsis that contains the word "Bilbo" and not the word "Gandalf"
	db.movies.find({$and:[{synopsis:{$regex:"Bilbo"}}, {synopsis:{$not:/Gandalf/}}]})
	
4. find all movies that have a synopsis that contains the word "dwarves" or "hobbit"
	db.movies.find({$or:[{synopsis:{$regex:"dwarves"}}, {synopsis:{$regex:"hobbit"}}]})
	
5. find all movies that have a synopsis that contains the word "gold" and "dragon"
	db.movies.find({$and:[{synopsis:{$regex:"gold"}}, {synopsis:{$regex:"dragon"}}]})

	
Update Documents

1. delete the movie "Pee Wee Herman's Big Adventure"
	db.movies.remove({_id:ObjectId("5c9f992ae5c2dfe9b3729c00")})

2. delete the movie "Avatar"
	db.movies.remove({_id:ObjectId("5c9f9936e5c2dfe9b3729c01")})	

db.users.insertMany([
  { "_id": 1, "name": "Alice", "age": 25, "city": "New York", "skills": ["JavaScript", "Node.js"] },
  { "_id": 2, "name": "Bob", "age": 30, "city": "San Francisco", "skills": ["Python", "Django"] },
  { "_id": 3, "name": "Charlie", "age": 22, "city": "Los Angeles", "skills": ["Java", "Spring"] },
  { "_id": 4, "name": "David", "age": 35, "city": "Seattle", "skills": ["Ruby", "Rails"] },
  { "_id": 5, "name": "Eve", "age": 28, "city": "Chicago", "skills": ["C#", ".NET"] }
])

Insert Documents:
db.users.insertOne({ "_id": 6, "name": "Frank", "age": 26, "city": "Miami", "skills": ["React", "GraphQL"] });

Query Documents:
db.users.find({ age: { $gte: 30 } });

Update Documents:
db.users.updateOne({ name: "Bob" }, { $set: { city: "Portland" } });

Delete Documents:
db.users.deleteOne({ name: "Charlie" });


Comparison Operators:
db.users.find({ age: { $gte: 25, $lte: 30 } });


Logical Operators:
db.users.find({ $or: [{ city: "New York" }, { city: "Los Angeles" }] });

Element Operators:
db.users.find({ skills: { $exists: true } });

Projection:
db.users.find({ city: "San Francisco" }, { name: 1, age: 1, _id: 0 });

Sorting:
db.users.find().sort({ age: 1 });

Indexing:
Create an Index:
db.users.createIndex({ name: 1 });


AGGREGATION_LEARN

db.sales.insertMany([
  { "_id": 1, "product": "Laptop", "quantity": 2, "price": 1000, "date": ISODate("2022-01-01T08:00:00Z") },
  { "_id": 2, "product": "Phone", "quantity": 1, "price": 500, "date": ISODate("2022-01-02T10:30:00Z") },
  { "_id": 3, "product": "Tablet", "quantity": 3, "price": 300, "date": ISODate("2022-01-03T12:45:00Z") },
  { "_id": 4, "product": "Laptop", "quantity": 1, "price": 1200, "date": ISODate("2022-01-04T14:15:00Z") },
  { "_id": 5, "product": "Phone", "quantity": 2, "price": 600, "date": ISODate("2022-01-05T16:30:00Z") }
])

1. Filtering:
find sales for the "Laptop" product:

db.sales.aggregate([
  { $match: { product: "Laptop" } }
]);

2. Grouping:
Group the sales by product and calculate the total quantity and revenue for each product:

db.sales.aggregate([
  { $group: { _id: "$product", totalQuantity: { $sum: "$quantity" }, totalRevenue: { $sum: { $multiply: ["$quantity", "$price"] } } } }
]);

3. Sorting:
Sort the results by total revenue in descending order:

db.sales.aggregate([
  { $group: { _id: "$product", totalQuantity: { $sum: "$quantity" }, totalRevenue: { $sum: { $multiply: ["$quantity", "$price"] } } } },
  { $sort: { totalRevenue: -1 } }
]);

4. Projecting:
Project only the product and total revenue fields:

db.sales.aggregate([
  { $group: { _id: "$product", totalQuantity: { $sum: "$quantity" }, totalRevenue: { $sum: { $multiply: ["$quantity", "$price"] } } } },
  { $project: { _id: 0, product: "$_id", totalRevenue: 1 } }
]);

5. Filtering and Sorting:
Find and sort the products with total revenue greater than $1000:

db.sales.aggregate([
  { $group: { _id: "$product", totalQuantity: { $sum: "$quantity" }, totalRevenue: { $sum: { $multiply: ["$quantity", "$price"] } } } },
  { $match: { totalRevenue: { $gt: 1000 } } },
  { $sort: { totalRevenue: -1 } }
]);



LOOKUP_LEARN

db.orders.insertMany([
  { "_id": 1, "orderNumber": "ORD001", "productID": 101, "quantity": 2 },
  { "_id": 2, "orderNumber": "ORD002", "productID": 102, "quantity": 1 },
  { "_id": 3, "orderNumber": "ORD003", "productID": 103, "quantity": 3 }
])

db.products.insertMany([
  { "_id": 101, "productName": "Laptop", "price": 1000 },
  { "_id": 102, "productName": "Phone", "price": 500 },
  { "_id": 103, "productName": "Tablet", "price": 300 }
])



db.orders.aggregate([
  {
    $lookup: {
      from: "products",  
      localField: "productID", 
      foreignField: "_id", 
      as: "productInfo" 
    }
  },
  {
    $project: {
      orderNumber: 1,
      quantity: 1,
      product: { $arrayElemAt: ["$productInfo", 0] } 
    }
  }
]);


